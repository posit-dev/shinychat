% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_chat_client.R
\name{set_chat_client}
\alias{set_chat_client}
\title{Set the chat client}
\usage{
set_chat_client(
  id,
  client,
  ...,
  bookmark = c("auto", "manual"),
  session = getDefaultReactiveDomain()
)
}
\arguments{
\item{id}{The ID of the chat element}

\item{client}{The \pkg{ellmer} LLM chat client.}

\item{...}{Used for future parameter expansion.}

\item{bookmark}{A character value determines how to handle bookmarking for
the chat component. For the values to work, it requires that the App author
has enabled bookmarking in their App. To enable bookmarking, you can call
\code{shiny::enableBookmarking("server")} or set the parameter in
\code{shinyApp(enableBookmarking = "server")}. It is strongly encouraged to use \code{"server"} when bookmarking as the URL limit can be quickly reached. \code{"url"} is only recommended for deployments where there is no persistent disk storage, such as shinyapps.io.

Updating the URL:
\itemize{
\item \code{"auto"} (default): The bookmark value will be updated when the chat client is done responding.
\item \code{"manual"}: The bookmark value will only update when \code{session$doBookmark()} is called by the App author.
}

Restoring from a bookmark:
\itemize{
\item \code{"auto"} (default) and \code{"manual"}: The chat client will be restored if  will be restored from the URL when the chat client is done responding."`
}

A warning will be issued if the bookmarking feature is not enabled.}

\item{session}{The Shiny session object}
}
\value{
Returns nothing (\code{invisible(NULL)}).
}
\description{
Adds hooks to the Shiny chat given the LLM client. By default, the chat set enable bookmarking.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(shiny)
library(bslib)
library(shinychat)

ui <- page_fillable(
  chat_ui("chat", fill = TRUE)
)

server <- function(input, output, session) {
  chat_client <- ellmer::chat_ollama(
    system_prompt = "Important: Always respond in a limerick",
    model = "qwen2.5-coder:1.5b",
    echo = TRUE
  )
  # Let the UI know about the client
  set_chat_client("chat", chat_client, bookmark = "auto")

  observeEvent(input$chat_user_input, {
    stream <- chat_client$stream_async(input$chat_user_input)
    chat_append("chat", stream)
  })
}

# Enable bookmarking!
shinyApp(ui, server, enableBookmarking = "server")
\dontshow{\}) # examplesIf}
}
