% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_chat_client.R
\name{set_chat_client}
\alias{set_chat_client}
\title{Set the chat client}
\usage{
set_chat_client(
  id,
  client,
  ...,
  bookmark = TRUE,
  session = getDefaultReactiveDomain()
)
}
\arguments{
\item{id}{The ID of the chat element}

\item{...}{Used for future parameter expansion.}

\item{bookmark}{A logical that determines if bookmarking hooks should be added for the chat component. If \code{TRUE} (default), the bookmark value will be updated when the chat client is done responding. On session restore, the bookmark value will attempt to restore from the URL.}

\item{session}{The Shiny session object}
}
\value{
Returns nothing (\code{invisible(NULL)}).
}
\description{
Adds hooks to the Shiny chat given the LLM client. By default, the chat set enable bookmarking.
}
\section{Bookmarking}{


\pkg{shinychat} will not enable bookmarking by default. To enable bookmarking, you can call \code{shiny::enableBookmarking()} or set the parameter in \code{shinyApp(enableBookmarking = "url")}.

To
}

\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(shiny)
library(bslib)
library(shinychat)

ui <- page_fillable(
  chat_ui("chat", fill = TRUE)
)

server <- function(input, output, session) {
  chat_client <- ellmer::chat_ollama(
    system_prompt = "Important: Always respond in a limerick",
    model = "qwen2.5-coder:1.5b",
    echo = TRUE
  )
  # Let the UI know about the client
  set_chat_client("chat", chat_client, bookmark = TRUE)

  observeEvent(input$chat_user_input, {
    stream <- chat_client$stream_async(input$chat_user_input)
    chat_append("chat", stream)
  })
}

# Enable bookmarking!
shinyApp(ui, server, enableBookmarking = "url")
\dontshow{\}) # examplesIf}
}
