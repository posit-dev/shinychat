[{"path":"https://jcheng5.github.io/shinychat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Posit Software, PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jcheng5.github.io/shinychat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Cheng. Author, maintainer. Carson Sievert. Author. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://jcheng5.github.io/shinychat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheng J, Sievert C (2025). shinychat: Chat UI Component 'shiny'. R package version 0.1.1.9000, https://jcheng5.github.io/shinychat/, https://github.com/jcheng5/shinychat.","code":"@Manual{,   title = {shinychat: Chat UI Component for 'shiny'},   author = {Joe Cheng and Carson Sievert},   year = {2025},   note = {R package version 0.1.1.9000, https://jcheng5.github.io/shinychat/},   url = {https://github.com/jcheng5/shinychat}, }"},{"path":"https://jcheng5.github.io/shinychat/index.html","id":"shinychat","dir":"","previous_headings":"","what":"Chat UI Component for shiny","title":"Chat UI Component for shiny","text":"Chat UI component Shiny R. (Shiny Python, see ui.Chat.)","code":""},{"path":"https://jcheng5.github.io/shinychat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Chat UI Component for shiny","text":"can install shinychat CRAN : , install development version shinychat GitHub :","code":"install.packages(\"shinychat\") # install.packages(\"pak\") pak::pak(\"posit-dev/shinychat\")"},{"path":"https://jcheng5.github.io/shinychat/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Chat UI Component for shiny","text":"run example, ’ll first need create OpenAI API key, set environment OPENAI_API_KEY. ’ll also need call pak::pak(\"tidyverse/ellmer\") install {ellmer} package.","code":"library(shiny) library(shinychat)  ui <- bslib::page_fluid(   chat_ui(\"chat\") )  server <- function(input, output, session) {   chat <- ellmer::chat_openai(system_prompt = \"You're a trickster who answers in riddles\")      observeEvent(input$chat_user_input, {     stream <- chat$stream_async(input$chat_user_input)     chat_append(\"chat\", stream)   }) }  shinyApp(ui, server)"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Append an assistant response (or user message) to a chat control — chat_append","title":"Append an assistant response (or user message) to a chat control — chat_append","text":"chat_append function appends message existing chat_ui(). response can string, string generator, string promise, string promise generator (returned 'ellmer' package's chat, stream, chat_async, stream_async methods, respectively). function called Shiny app's server. generally used append model's response chat, user messages added chat UI automatically front-end. need use chat_append(role=\"user\") programmatically generating queries server sending behalf user, want reflected UI.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append an assistant response (or user message) to a chat control — chat_append","text":"","code":"chat_append(   id,   response,   role = c(\"assistant\", \"user\"),   session = getDefaultReactiveDomain() )"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append an assistant response (or user message) to a chat control — chat_append","text":"id ID chat element response message message stream append chat element. actual message content can one following: string, interpreted markdown rendered HTML client. prevent interpreting markdown, mark string htmltools::HTML(). UI element. includes htmltools::tagList(), take UI elements (including strings) children. case, strings still interpreted markdown long inside HTML. role role message (either \"assistant\" \"user\"). Defaults \"assistant\". session Shiny session object","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append an assistant response (or user message) to a chat control — chat_append","text":"Returns promise. promise resolves message successfully sent client; note guarantee message actually received rendered client. promise rejects error occurs processing response (see \"Error handling\" section).","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Append an assistant response (or user message) to a chat control — chat_append","text":"response argument generator, promise, promise generator, error occurs producing message (e.g., iteration stream_async fails), promise returned chat_append reject error. chat_append call last expression Shiny observer, Shiny see observer failed, end user session. prefer handle error gracefully, use promises::catch() promise returned chat_append.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append an assistant response (or user message) to a chat control — chat_append","text":"","code":"if (FALSE) { # interactive() library(shiny) library(coro) library(bslib) library(shinychat)  # Dumbest chatbot in the world: ignores user input and chooses # a random, vague response. fake_chatbot <- async_generator(function(input) {   responses <- c(     \"What does that suggest to you?\",     \"I see.\",     \"I'm not sure I understand you fully.\",     \"What do you think?\",     \"Can you elaborate on that?\",     \"Interesting question! Let's examine thi... **See more**\"   )    await(async_sleep(1))   for (chunk in strsplit(sample(responses, 1), \"\")[[1]]) {     yield(chunk)     await(async_sleep(0.02))   } })  ui <- page_fillable(   chat_ui(\"chat\", fill = TRUE) )  server <- function(input, output, session) {   observeEvent(input$chat_user_input, {     response <- fake_chatbot(input$chat_user_input)     chat_append(\"chat\", response)   }) }  shinyApp(ui, server) }"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-level function to append a message to a chat control — chat_append_message","title":"Low-level function to append a message to a chat control — chat_append_message","text":"advanced users want control message chunking behavior. users use chat_append() instead.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-level function to append a message to a chat control — chat_append_message","text":"","code":"chat_append_message(   id,   msg,   chunk = TRUE,   operation = c(\"append\", \"replace\"),   session = getDefaultReactiveDomain() )"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-level function to append a message to a chat control — chat_append_message","text":"id ID chat element msg message append. named list role content fields. role field either \"user\" \"assistant\". content field string containing message content, Markdown format. chunk Whether msg just chunk message, , type. FALSE, msg complete message. \"start\", msg first chunk multi-chunk message. \"end\", msg last chunk multi-chunk message. TRUE, msg intermediate chunk multi-chunk message. Default FALSE. operation operation perform message. \"append\", new content appended existing message content. \"replace\", existing message content replaced new content. Ignored chunk FALSE. session Shiny session object","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low-level function to append a message to a chat control — chat_append_message","text":"Returns nothing (invisible(NULL)).","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_append_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low-level function to append a message to a chat control — chat_append_message","text":"","code":"if (FALSE) { # interactive() library(shiny) library(coro) library(bslib) library(shinychat)  # Dumbest chatbot in the world: ignores user input and chooses # a random, vague response. fake_chatbot <- async_generator(function(id, input) {   responses <- c(     \"What does that suggest to you?\",     \"I see.\",     \"I'm not sure I understand you fully.\",     \"What do you think?\",     \"Can you elaborate on that?\",     \"Interesting question! Let's examine thi... **See more**\"   )    # Use low-level chat_append_message() to temporarily set a progress message   chat_append_message(id, list(role = \"assistant\", content = \"_Thinking..._ \"))   await(async_sleep(1))   # Clear the progress message   chat_append_message(id, list(role = \"assistant\", content = \"\"), operation = \"replace\")    for (chunk in strsplit(sample(responses, 1), \"\")[[1]]) {     yield(chunk)     await(async_sleep(0.02))   } })  ui <- page_fillable(   chat_ui(\"chat\", fill = TRUE) )  server <- function(input, output, session) {   observeEvent(input$chat_user_input, {     response <- fake_chatbot(\"chat\", input$chat_user_input)     chat_append(\"chat\", response)   }) }  shinyApp(ui, server) }"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear all messages from a chat control — chat_clear","title":"Clear all messages from a chat control — chat_clear","text":"Clear messages chat control","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear all messages from a chat control — chat_clear","text":"","code":"chat_clear(id, session = getDefaultReactiveDomain())"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear all messages from a chat control — chat_clear","text":"id ID chat element session Shiny session object","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_clear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear all messages from a chat control — chat_clear","text":"","code":"if (FALSE) { # interactive()  library(shiny) library(bslib)  ui <- page_fillable(   chat_ui(\"chat\", fill = TRUE),   actionButton(\"clear\", \"Clear chat\") )  server <- function(input, output, session) {   observeEvent(input$clear, {     chat_clear(\"chat\")   })    observeEvent(input$chat_user_input, {     response <- paste0(\"You said: \", input$chat_user_input)     chat_append(\"chat\", response)   }) }  shinyApp(ui, server) }"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chat UI element — chat_ui","title":"Create a chat UI element — chat_ui","text":"Inserts chat UI element Shiny UI, includes scrollable section displaying chat messages, input field user enter new messages. respond user input, listen input$ID_user_input (example, id=\"my_chat\", user input input$my_chat_user_input), use chat_append() append messages chat.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chat UI element — chat_ui","text":"","code":"chat_ui(   id,   ...,   messages = NULL,   placeholder = \"Enter a message...\",   width = \"min(680px, 100%)\",   height = \"auto\",   fill = TRUE )"},{"path":"https://jcheng5.github.io/shinychat/reference/chat_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chat UI element — chat_ui","text":"id ID chat element ... Extra HTML attributes include chat element messages list messages prepopulate chat . message can one following: string, interpreted markdown rendered HTML client. prevent interpreting markdown, mark string htmltools::HTML(). UI element. includes htmltools::tagList(), take UI elements (including strings) children. case, strings still interpreted markdown long inside HTML. named list content role. content can contain content described , role can \"assistant\" \"user\". placeholder placeholder text chat's user input field width CSS width chat element height CSS height chat element fill Whether chat element try vertically fill container, container fillable","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a chat UI element — chat_ui","text":"Shiny tag object, suitable inclusion Shiny UI","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/chat_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a chat UI element — chat_ui","text":"","code":"if (FALSE) { # interactive() library(shiny) library(bslib) library(shinychat)  ui <- page_fillable(   chat_ui(\"chat\", fill = TRUE) )  server <- function(input, output, session) {   observeEvent(input$chat_user_input, {     # In a real app, this would call out to a chat model or API,     # perhaps using the 'ellmer' package.     response <- paste0(       \"You said:\\n\\n\",       \"<blockquote>\",       htmltools::htmlEscape(input$chat_user_input),       \"<\/blockquote>\"     )     chat_append(\"chat\", response)   }) }  shinyApp(ui, server) }"},{"path":"https://jcheng5.github.io/shinychat/reference/markdown_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream markdown content — markdown_stream","title":"Stream markdown content — markdown_stream","text":"Streams markdown content output_markdown_stream() UI element.  markdown stream can useful displaying generative AI responses (outside chat interface), streaming logs, use cases chunks content generated time.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/markdown_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream markdown content — markdown_stream","text":"","code":"markdown_stream(   id,   content_stream,   operation = c(\"replace\", \"append\"),   session = getDefaultReactiveDomain() )"},{"path":"https://jcheng5.github.io/shinychat/reference/markdown_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream markdown content — markdown_stream","text":"id ID markdown stream stream content . content_stream string generator (e.g., coro::generator() coro::async_generator()), string promise (e.g., promises::promise()), string promise generator. operation operation perform markdown stream. default, \"replace\", replace current content new content stream. option, \"append\", append new content stream existing content. session Shiny session object.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/markdown_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream markdown content — markdown_stream","text":"","code":"if (FALSE) { # interactive()  library(shiny) library(coro) library(bslib) library(shinychat)  # Define a generator that yields a random response # (imagine this is a more sophisticated AI generator) random_response_generator <- async_generator(function() {   responses <- c(     \"What does that suggest to you?\",     \"I see.\",     \"I'm not sure I understand you fully.\",     \"What do you think?\",     \"Can you elaborate on that?\",     \"Interesting question! Let's examine thi... **See more**\"   )    await(async_sleep(1))   for (chunk in strsplit(sample(responses, 1), \"\")[[1]]) {     yield(chunk)     await(async_sleep(0.02))   } })  ui <- page_fillable(   actionButton(\"generate\", \"Generate response\"),   output_markdown_stream(\"stream\") )  server <- function(input, output, session) {   observeEvent(input$generate, {     markdown_stream(\"stream\", random_response_generator())   }) }  shinyApp(ui, server) }"},{"path":"https://jcheng5.github.io/shinychat/reference/output_markdown_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UI element for a markdown stream. — output_markdown_stream","title":"Create a UI element for a markdown stream. — output_markdown_stream","text":"Creates UI element markdown_stream(). markdown stream can useful displaying generative AI responses (outside chat interface), streaming logs, use cases chunks content generated time.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/output_markdown_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UI element for a markdown stream. — output_markdown_stream","text":"","code":"output_markdown_stream(   id,   ...,   content = \"\",   content_type = \"markdown\",   auto_scroll = TRUE,   width = \"min(680px, 100%)\",   height = \"auto\" )"},{"path":"https://jcheng5.github.io/shinychat/reference/output_markdown_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UI element for a markdown stream. — output_markdown_stream","text":"id unique identifier markdown stream. ... Extra HTML attributes include chat element content string content display streaming occurs. content_type Markdown HTML, may also UI element(s) input output bindings. content_type content type. Default \"markdown\" (specifically, CommonMark). Supported content types include: * \"markdown\": markdown text, specifically CommonMark * \"html\": rendering HTML content. * \"text\": plain text. * \"semi-markdown\": rendering markdown, HTML tags escaped. auto_scroll Whether automatically scroll bottom scrollable container new content added. Default True. width width UI element. height height UI element.","code":""},{"path":"https://jcheng5.github.io/shinychat/reference/output_markdown_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UI element for a markdown stream. — output_markdown_stream","text":"shiny tag object.","code":""},{"path":[]},{"path":"https://jcheng5.github.io/shinychat/reference/shinychat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shinychat: Chat UI Component for 'shiny' — shinychat-package","title":"shinychat: Chat UI Component for 'shiny' — shinychat-package","text":"Provides scrolling chat interface multiline input, suitable creating chatbot apps based Large Language Models (LLMs). Designed work particularly well 'ellmer' R package calling LLMs.","code":""},{"path":[]},{"path":"https://jcheng5.github.io/shinychat/reference/shinychat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shinychat: Chat UI Component for 'shiny' — shinychat-package","text":"Maintainer: Joe Cheng joe@posit.co Authors: Carson Sievert carson@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://jcheng5.github.io/shinychat/news/index.html","id":"shinychat-development-version","dir":"Changelog","previous_headings":"","what":"shinychat (development version)","title":"shinychat (development version)","text":"Added new output_markdown_stream() markdown_stream() functions allow streaming markdown content client. useful showing Generative AI responses real-time Shiny app, outside chat interface. (#23) chat_ui() output_markdown_stream() now support arbirary Shiny UI elements inside messages. allows gathering input user (e.g., selectInput()), displaying rich output (e.g., htmlwidgets like plotly), . (#1868) Added new chat_clear() function clear chat messages. (#25)","code":""},{"path":"https://jcheng5.github.io/shinychat/news/index.html","id":"shinychat-011","dir":"Changelog","previous_headings":"","what":"shinychat 0.1.1","title":"shinychat 0.1.1","text":"CRAN release: 2024-12-18 Initial CRAN submission.","code":""}]
